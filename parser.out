Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    PRINT
    assign
    comment
    num
    var

Grammar

Rule 0     S' -> program
Rule 1     program -> start command end
Rule 2     command -> ESCREVER args
Rule 3     args -> args , arg
Rule 4     args -> arg
Rule 5     arg -> string

Terminals, with rules where they appear

,                    : 3
ESCREVER             : 2
PRINT                : 
assign               : 
comment              : 
end                  : 1
error                : 
num                  : 
start                : 1
string               : 5
var                  : 

Nonterminals, with rules where they appear

arg                  : 3 4
args                 : 2 3
command              : 1
program              : 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . start command end

    start           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> start . command end
    (2) command -> . ESCREVER args

    ESCREVER        shift and go to state 4

    command                        shift and go to state 3

state 3

    (1) program -> start command . end

    end             shift and go to state 5


state 4

    (2) command -> ESCREVER . args
    (3) args -> . args , arg
    (4) args -> . arg
    (5) arg -> . string

    string          shift and go to state 8

    args                           shift and go to state 6
    arg                            shift and go to state 7

state 5

    (1) program -> start command end .

    $end            reduce using rule 1 (program -> start command end .)


state 6

    (2) command -> ESCREVER args .
    (3) args -> args . , arg

    end             reduce using rule 2 (command -> ESCREVER args .)
    ,               shift and go to state 9


state 7

    (4) args -> arg .

    ,               reduce using rule 4 (args -> arg .)
    end             reduce using rule 4 (args -> arg .)


state 8

    (5) arg -> string .

    ,               reduce using rule 5 (arg -> string .)
    end             reduce using rule 5 (arg -> string .)


state 9

    (3) args -> args , . arg
    (5) arg -> . string

    string          shift and go to state 8

    arg                            shift and go to state 10

state 10

    (3) args -> args , arg .

    ,               reduce using rule 3 (args -> args , arg .)
    end             reduce using rule 3 (args -> args , arg .)

