Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    PRINT
    VARS
    comment

Grammar

Rule 0     S' -> program
Rule 1     program -> start commands end
Rule 2     commands -> commands command ;
Rule 3     commands -> command ;
Rule 4     command -> ESCREVER args
Rule 5     command -> VAR var_list
Rule 6     command -> var assign arg
Rule 7     var_list -> var
Rule 8     var_list -> var_list , var
Rule 9     var_list -> var assign arg
Rule 10    var_list -> var_list , var assign arg
Rule 11    args -> args , arg
Rule 12    args -> arg
Rule 13    arg -> var
Rule 14    arg -> string
Rule 15    arg -> expr
Rule 16    expr -> expr + expr
Rule 17    expr -> expr - expr
Rule 18    expr -> expr * expr
Rule 19    expr -> expr / expr
Rule 20    expr -> var
Rule 21    expr -> num
Rule 22    expr -> ( expr )

Terminals, with rules where they appear

(                    : 22
)                    : 22
*                    : 18
+                    : 16
,                    : 8 10 11
-                    : 17
/                    : 19
;                    : 2 3
ESCREVER             : 4
PRINT                : 
VAR                  : 5
VARS                 : 
assign               : 6 9 10
comment              : 
end                  : 1
error                : 
num                  : 21
start                : 1
string               : 14
var                  : 6 7 8 9 10 13 20

Nonterminals, with rules where they appear

arg                  : 6 9 10 11 12
args                 : 4 11
command              : 2 3
commands             : 1 2
expr                 : 15 16 16 17 17 18 18 19 19 22
program              : 0
var_list             : 5 8 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . start commands end

    start           shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> start . commands end
    (2) commands -> . commands command ;
    (3) commands -> . command ;
    (4) command -> . ESCREVER args
    (5) command -> . VAR var_list
    (6) command -> . var assign arg

    ESCREVER        shift and go to state 5
    VAR             shift and go to state 6
    var             shift and go to state 7

    commands                       shift and go to state 3
    command                        shift and go to state 4

state 3

    (1) program -> start commands . end
    (2) commands -> commands . command ;
    (4) command -> . ESCREVER args
    (5) command -> . VAR var_list
    (6) command -> . var assign arg

    end             shift and go to state 8
    ESCREVER        shift and go to state 5
    VAR             shift and go to state 6
    var             shift and go to state 7

    command                        shift and go to state 9

state 4

    (3) commands -> command . ;

    ;               shift and go to state 10


state 5

    (4) command -> ESCREVER . args
    (11) args -> . args , arg
    (12) args -> . arg
    (13) arg -> . var
    (14) arg -> . string
    (15) arg -> . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . var
    (21) expr -> . num
    (22) expr -> . ( expr )

    var             shift and go to state 13
    string          shift and go to state 14
    num             shift and go to state 16
    (               shift and go to state 17

    args                           shift and go to state 11
    arg                            shift and go to state 12
    expr                           shift and go to state 15

state 6

    (5) command -> VAR . var_list
    (7) var_list -> . var
    (8) var_list -> . var_list , var
    (9) var_list -> . var assign arg
    (10) var_list -> . var_list , var assign arg

    var             shift and go to state 19

    var_list                       shift and go to state 18

state 7

    (6) command -> var . assign arg

    assign          shift and go to state 20


state 8

    (1) program -> start commands end .

    $end            reduce using rule 1 (program -> start commands end .)


state 9

    (2) commands -> commands command . ;

    ;               shift and go to state 21


state 10

    (3) commands -> command ; .

    end             reduce using rule 3 (commands -> command ; .)
    ESCREVER        reduce using rule 3 (commands -> command ; .)
    VAR             reduce using rule 3 (commands -> command ; .)
    var             reduce using rule 3 (commands -> command ; .)


state 11

    (4) command -> ESCREVER args .
    (11) args -> args . , arg

    ;               reduce using rule 4 (command -> ESCREVER args .)
    ,               shift and go to state 22


state 12

    (12) args -> arg .

    ,               reduce using rule 12 (args -> arg .)
    ;               reduce using rule 12 (args -> arg .)


state 13

    (13) arg -> var .
    (20) expr -> var .

  ! reduce/reduce conflict for , resolved using rule 13 (arg -> var .)
  ! reduce/reduce conflict for ; resolved using rule 13 (arg -> var .)
    ,               reduce using rule 13 (arg -> var .)
    ;               reduce using rule 13 (arg -> var .)
    +               reduce using rule 20 (expr -> var .)
    -               reduce using rule 20 (expr -> var .)
    *               reduce using rule 20 (expr -> var .)
    /               reduce using rule 20 (expr -> var .)

  ! ,               [ reduce using rule 20 (expr -> var .) ]
  ! ;               [ reduce using rule 20 (expr -> var .) ]


state 14

    (14) arg -> string .

    ,               reduce using rule 14 (arg -> string .)
    ;               reduce using rule 14 (arg -> string .)


state 15

    (15) arg -> expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr

    ,               reduce using rule 15 (arg -> expr .)
    ;               reduce using rule 15 (arg -> expr .)
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 25
    /               shift and go to state 26


state 16

    (21) expr -> num .

    +               reduce using rule 21 (expr -> num .)
    -               reduce using rule 21 (expr -> num .)
    *               reduce using rule 21 (expr -> num .)
    /               reduce using rule 21 (expr -> num .)
    ,               reduce using rule 21 (expr -> num .)
    ;               reduce using rule 21 (expr -> num .)
    )               reduce using rule 21 (expr -> num .)


state 17

    (22) expr -> ( . expr )
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . var
    (21) expr -> . num
    (22) expr -> . ( expr )

    var             shift and go to state 28
    num             shift and go to state 16
    (               shift and go to state 17

    expr                           shift and go to state 27

state 18

    (5) command -> VAR var_list .
    (8) var_list -> var_list . , var
    (10) var_list -> var_list . , var assign arg

    ;               reduce using rule 5 (command -> VAR var_list .)
    ,               shift and go to state 29


state 19

    (7) var_list -> var .
    (9) var_list -> var . assign arg

    ,               reduce using rule 7 (var_list -> var .)
    ;               reduce using rule 7 (var_list -> var .)
    assign          shift and go to state 30


state 20

    (6) command -> var assign . arg
    (13) arg -> . var
    (14) arg -> . string
    (15) arg -> . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . var
    (21) expr -> . num
    (22) expr -> . ( expr )

    var             shift and go to state 13
    string          shift and go to state 14
    num             shift and go to state 16
    (               shift and go to state 17

    arg                            shift and go to state 31
    expr                           shift and go to state 15

state 21

    (2) commands -> commands command ; .

    end             reduce using rule 2 (commands -> commands command ; .)
    ESCREVER        reduce using rule 2 (commands -> commands command ; .)
    VAR             reduce using rule 2 (commands -> commands command ; .)
    var             reduce using rule 2 (commands -> commands command ; .)


state 22

    (11) args -> args , . arg
    (13) arg -> . var
    (14) arg -> . string
    (15) arg -> . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . var
    (21) expr -> . num
    (22) expr -> . ( expr )

    var             shift and go to state 13
    string          shift and go to state 14
    num             shift and go to state 16
    (               shift and go to state 17

    arg                            shift and go to state 32
    expr                           shift and go to state 15

state 23

    (16) expr -> expr + . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . var
    (21) expr -> . num
    (22) expr -> . ( expr )

    var             shift and go to state 28
    num             shift and go to state 16
    (               shift and go to state 17

    expr                           shift and go to state 33

state 24

    (17) expr -> expr - . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . var
    (21) expr -> . num
    (22) expr -> . ( expr )

    var             shift and go to state 28
    num             shift and go to state 16
    (               shift and go to state 17

    expr                           shift and go to state 34

state 25

    (18) expr -> expr * . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . var
    (21) expr -> . num
    (22) expr -> . ( expr )

    var             shift and go to state 28
    num             shift and go to state 16
    (               shift and go to state 17

    expr                           shift and go to state 35

state 26

    (19) expr -> expr / . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . var
    (21) expr -> . num
    (22) expr -> . ( expr )

    var             shift and go to state 28
    num             shift and go to state 16
    (               shift and go to state 17

    expr                           shift and go to state 36

state 27

    (22) expr -> ( expr . )
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr

    )               shift and go to state 37
    +               shift and go to state 23
    -               shift and go to state 24
    *               shift and go to state 25
    /               shift and go to state 26


state 28

    (20) expr -> var .

    )               reduce using rule 20 (expr -> var .)
    +               reduce using rule 20 (expr -> var .)
    -               reduce using rule 20 (expr -> var .)
    *               reduce using rule 20 (expr -> var .)
    /               reduce using rule 20 (expr -> var .)
    ,               reduce using rule 20 (expr -> var .)
    ;               reduce using rule 20 (expr -> var .)


state 29

    (8) var_list -> var_list , . var
    (10) var_list -> var_list , . var assign arg

    var             shift and go to state 38


state 30

    (9) var_list -> var assign . arg
    (13) arg -> . var
    (14) arg -> . string
    (15) arg -> . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . var
    (21) expr -> . num
    (22) expr -> . ( expr )

    var             shift and go to state 13
    string          shift and go to state 14
    num             shift and go to state 16
    (               shift and go to state 17

    arg                            shift and go to state 39
    expr                           shift and go to state 15

state 31

    (6) command -> var assign arg .

    ;               reduce using rule 6 (command -> var assign arg .)


state 32

    (11) args -> args , arg .

    ,               reduce using rule 11 (args -> args , arg .)
    ;               reduce using rule 11 (args -> args , arg .)


state 33

    (16) expr -> expr + expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr

    +               reduce using rule 16 (expr -> expr + expr .)
    -               reduce using rule 16 (expr -> expr + expr .)
    ,               reduce using rule 16 (expr -> expr + expr .)
    ;               reduce using rule 16 (expr -> expr + expr .)
    )               reduce using rule 16 (expr -> expr + expr .)
    *               shift and go to state 25
    /               shift and go to state 26

  ! *               [ reduce using rule 16 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 16 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 23 ]
  ! -               [ shift and go to state 24 ]


state 34

    (17) expr -> expr - expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr

    +               reduce using rule 17 (expr -> expr - expr .)
    -               reduce using rule 17 (expr -> expr - expr .)
    ,               reduce using rule 17 (expr -> expr - expr .)
    ;               reduce using rule 17 (expr -> expr - expr .)
    )               reduce using rule 17 (expr -> expr - expr .)
    *               shift and go to state 25
    /               shift and go to state 26

  ! *               [ reduce using rule 17 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 17 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 23 ]
  ! -               [ shift and go to state 24 ]


state 35

    (18) expr -> expr * expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr

    +               reduce using rule 18 (expr -> expr * expr .)
    -               reduce using rule 18 (expr -> expr * expr .)
    *               reduce using rule 18 (expr -> expr * expr .)
    /               reduce using rule 18 (expr -> expr * expr .)
    ,               reduce using rule 18 (expr -> expr * expr .)
    ;               reduce using rule 18 (expr -> expr * expr .)
    )               reduce using rule 18 (expr -> expr * expr .)

  ! +               [ shift and go to state 23 ]
  ! -               [ shift and go to state 24 ]
  ! *               [ shift and go to state 25 ]
  ! /               [ shift and go to state 26 ]


state 36

    (19) expr -> expr / expr .
    (16) expr -> expr . + expr
    (17) expr -> expr . - expr
    (18) expr -> expr . * expr
    (19) expr -> expr . / expr

    +               reduce using rule 19 (expr -> expr / expr .)
    -               reduce using rule 19 (expr -> expr / expr .)
    *               reduce using rule 19 (expr -> expr / expr .)
    /               reduce using rule 19 (expr -> expr / expr .)
    ,               reduce using rule 19 (expr -> expr / expr .)
    ;               reduce using rule 19 (expr -> expr / expr .)
    )               reduce using rule 19 (expr -> expr / expr .)

  ! +               [ shift and go to state 23 ]
  ! -               [ shift and go to state 24 ]
  ! *               [ shift and go to state 25 ]
  ! /               [ shift and go to state 26 ]


state 37

    (22) expr -> ( expr ) .

    +               reduce using rule 22 (expr -> ( expr ) .)
    -               reduce using rule 22 (expr -> ( expr ) .)
    *               reduce using rule 22 (expr -> ( expr ) .)
    /               reduce using rule 22 (expr -> ( expr ) .)
    ,               reduce using rule 22 (expr -> ( expr ) .)
    ;               reduce using rule 22 (expr -> ( expr ) .)
    )               reduce using rule 22 (expr -> ( expr ) .)


state 38

    (8) var_list -> var_list , var .
    (10) var_list -> var_list , var . assign arg

    ,               reduce using rule 8 (var_list -> var_list , var .)
    ;               reduce using rule 8 (var_list -> var_list , var .)
    assign          shift and go to state 40


state 39

    (9) var_list -> var assign arg .

    ,               reduce using rule 9 (var_list -> var assign arg .)
    ;               reduce using rule 9 (var_list -> var assign arg .)


state 40

    (10) var_list -> var_list , var assign . arg
    (13) arg -> . var
    (14) arg -> . string
    (15) arg -> . expr
    (16) expr -> . expr + expr
    (17) expr -> . expr - expr
    (18) expr -> . expr * expr
    (19) expr -> . expr / expr
    (20) expr -> . var
    (21) expr -> . num
    (22) expr -> . ( expr )

    var             shift and go to state 13
    string          shift and go to state 14
    num             shift and go to state 16
    (               shift and go to state 17

    arg                            shift and go to state 41
    expr                           shift and go to state 15

state 41

    (10) var_list -> var_list , var assign arg .

    ,               reduce using rule 10 (var_list -> var_list , var assign arg .)
    ;               reduce using rule 10 (var_list -> var_list , var assign arg .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 13 resolved using rule (arg -> var)
WARNING: rejected rule (expr -> var) in state 13
